import asyncio
import logging

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram.types import Message

from ai import run_graph
from core.settings import settings
from state import user_states, NegotiationState

bot = Bot(token=settings.tg_bot_token)
dp = Dispatcher()
router = Router()


@router.message(CommandStart())
async def handle_start(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∂–µ–ª–∞–µ–º—ã–π CPM –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –±–ª–æ–≥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 5000-10000')")
    user_states[message.from_user.id] = NegotiationState(
        message="",
        history=[],
        offer_type=None,
        final_price=None,
        final_format=None,
        agreed=False,
        rejected=False,
        price_drop_count=0,
        cpm=None,
        min_views=None,
        max_views=None
    )


@router.message(F.content_type == ContentType.TEXT)
async def negotiation_handler(message: Message):
    user_id = message.from_user.id
    text = message.text

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø–æ—Å–ª–µ /start, –ø–∞—Ä—Å–∏–º CPM –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    if user_id in user_states and user_states[user_id]["cpm"] is None:
        try:
            parts = text.split()
            cpm = float(parts[0])
            views = parts[1]
            if "-" in views:
                min_views, max_views = map(int, views.split("-"))
            else:
                min_views = max_views = int(views)
            user_states[user_id].update({"cpm": cpm, "min_views": min_views, "max_views": max_views})
            await message.answer("Hey, please, provide your desired rate")
            user_states[user_id]["history"].append("ü§ñ: Hey, please, provide your desired rate")
            return
        except (ValueError, IndexError):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏ CPM –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: '10 5000-10000'")
            return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        response = await run_graph(text, user_id)
        await message.answer(response)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print(f"[ERROR] {e}")

dp.include_router(router)

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
