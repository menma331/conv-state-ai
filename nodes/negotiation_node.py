from enum import Enum
# from chains.evaluate import get_decision
# from chains.propose import get_propose
# from state import NegotiationState
#

# def calculate_increases(base_offer, step):
#     if step == 1:
#         return base_offer * 1.20  # +20%
#     elif step == 2:
#         return base_offer * 1.30  # –ò—Ç–æ–≥–æ +30% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π
#     return base_offer
#
# def negotiate_node(state: NegotiationState) -> dict:
#     """–û–¥–∏–Ω —à–∞–≥ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤."""
#     # if state.propose_count >= 3:
#     #     state.decision = Decision.reject.value
#     #     state.reason = "–î–æ–ª–≥–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è."
#     #     return {"next_node": "finalize", "state": state}
#     #
#     # # –†–∞—Å—á—ë—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
#     # state.current_offer = calculate_increases(state.cpm, state.propose_count)
#     #
#     # user_message = state.user_message # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
#     # state.history.append(f"üë®: {user_message}")
#     #
#     # state.decision = get_decision(state) # –ø–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     #
#     # if state.decision == Decision.accept.value or state.decision == Decision.reject: # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≥–ª–∞—Å–µ–Ω –ª–∏ –æ–Ω
#     #     if state.decision == Decision.reject:
#     #         state.reason = "–ù–µ —Å–º–æ–≥–ª–∏ —Å—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è"
#     #     return {"next_node": "finalize", "state": state}
#     #
#     # propose_text = get_propose(state)
#     #
#     # # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
#     # state.bot_message = propose_text
#     # state.history.append(f"ü§ñ: {propose_text}")
#     #
#     # # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     # state.decision = get_decision(state)
#     # state.propose_count += 1
#     #
#     # return {"next_node": "negotiation", "state": state}  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ—Ä–≥–∏
#
#     if state.propose_count >= 3:
#         state.decision = Decision.reject.value
#         state.reason = "–î–æ–ª–≥–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è."
#         return {"next_node": "finalize", "state": state}
#
#     if not state.awaiting_user_response:
#         # –≠—Ç–∞–ø 1: –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
#         state.current_offer = calculate_increases(state.cpm, state.propose_count)
#         propose_text = get_propose(state)
#         state.history.append(f"ü§ñ: {propose_text}")
#         state.awaiting_user_response = True  # <--- –ö–ª—é—á–µ–≤–æ–π —Ñ–ª–∞–≥
#         state.bot_message = propose_text
#         state.propose_count += 1
#         return {"next_node": "negotiation", "state": state}
#
#     else:
#         # –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         state.history.append(f"üë§: {state.user_message}")
#         state.decision = get_decision(state)
#         state.awaiting_user_response = False  # <--- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
#
#         if state.decision in {Decision.accept.value, Decision.reject.value}:
#             return {"next_node": "finalize", "state": state}
#
#         return {"next_node": "negotiation", "state": state}

from chains.evaluate import get_decision
from chains.propose import get_propose
from state import NegotiationState, Decision


def calculate_increases(base_offer, step):
    if step == 1:
        return base_offer * 1.20
    elif step == 2:
        return base_offer * 1.30
    return base_offer


def negotiate_node(state: NegotiationState) -> dict:
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
    if state['propose_count'] >= 3:
        state['decision'] = Decision.reject.value
        state['reason'] = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"
        return {"next_node": "finalize", "state": state}

    if not state['awaiting_user_response']:
        # –≠—Ç–∞–ø 1: –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        state['current_offer'] = calculate_increases(state['cpm'], state['propose_count'])
        state['bot_message'] = get_propose(state)
        state['history'].append(f"ü§ñ: {state['bot_message']}")
        state['awaiting_user_response'] = True
        state['propose_count'] += 1
        return {"next_node": "negotiation", "state": state}

    else:
        # –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state['history'].append(f"üë§: {state['user_message']}")
        state['decision'] = get_decision(state).value
        state['awaiting_user_response'] = False

        if state['decision'] != "negotiation":
            return {"next_node": "finalize", "state": state}

        return {"next_node": "negotiation", "state": state}